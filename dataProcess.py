def uartDataProcess(hex_str):
    # 1. 转换为列表（去掉空格）
    hex_list = hex_str.strip().split()
    hex_list = [int(x, 16) for x in hex_list]

    # 2. 找到所有分隔符的起始位置
    split_indices = []
    for i in range(len(hex_list) - 3):
        if hex_list[i:i+4] == [0xFF, 0xFF, 0xFF, 0xFF]:
            split_indices.append(i)

    # 3. 截取每段数据，跳过分隔符
    segments = []
    for i in range(len(split_indices)):
        start = split_indices[i] + 4  # 跳过4个FF
        end = split_indices[i+1] if i+1 < len(split_indices) else len(hex_list)
        segment = hex_list[start:end]

        # 保证段长为256字节（128个u16）
        if len(segment) >= 256:
            segment = segment[:256]
            # 组装成u16（高字节在前）
            u16_list = []
            for j in range(0, len(segment), 2):
                val = (segment[j] << 8) | segment[j+1]
                u16_list.append(val)
            segments.append(u16_list)

    return segments

import matplotlib.pyplot as plt

def plot_height_data(u16_list, segment_idx=1):
    # 去掉第一个和最后六个数据
    trimmed_data = u16_list[1:-6]

    # 时间轴更新（每 0.1 秒采样）
    time = [i * 0.1 for i in range(len(trimmed_data))]

    plt.figure(figsize=(10, 5))
    plt.plot(time, trimmed_data, marker='o', linestyle='-', color='blue', label='Height')
    plt.xlabel('Time (s)')
    plt.ylabel('Height')
    plt.title(f'Segment {segment_idx} - Height over Time (Trimmed)')
    plt.grid(True)
    plt.legend()
    plt.tight_layout()
    plt.savefig("output.jpg")


# 示例数据（你可以替换成从文件读取等方式）
hex_input = '''
FF FF FF FF 0F 0F 02 6A 02 6A 02 6A 02 6A 02 6A 02 6A 02 6A 02 6A 02 6A 02 6A 02 6A 02 6A 02 6A 02 6A 02 6A 02 6A 02 6A 02 6A 02 6A 02 6A 02 6A 02 6A 02 6A 02 6A 02 6A 02 6A 02 6A 02 6A 02 6A 02 6A 02 6A 02 6A 02 6A 02 6A 02 6A 02 6A 02 6A 02 6A 02 6A 02 6A 02 6A 02 6A 02 6A 02 6A 02 6A 02 67 02 64 02 65 02 66 02 67 02 68 02 6A 02 6A 02 6A 02 6A 02 6A 02 6A 02 6A 02 6A 02 6A 02 6A 02 6A 02 6A 02 6A 02 6A 02 6A 02 6A 02 6A 02 6A 02 6A 02 6A 02 6A 02 6A 02 6A 02 6A 02 6A 02 6A 02 6A 02 6A 02 6A 02 6A 02 6A 02 6A 02 6A 02 6A 02 6A 02 6A 02 6A 02 6A 02 6A 02 6A 02 6A 02 6A 02 6A 02 6A 02 6A 02 6A 02 6A 02 6A 02 6A 02 6A 02 6A 02 6A 02 6A 02 6A 02 6A 02 6A 02 6A 02 6A 02 6A 02 6A 02 6A 02 6A 02 6A 02 6A 02 6A 02 6A 02 6A 02 6A 02 6A 02 6A 00 00 00 00 00 00 00 00 00 00 00 00 FF FF FF FF 0F 0F 02 6B 02 6B 02 6B 02 6B 02 6B 02 6B 02 6B 02 6B 02 6B 02 6B 02 6B 02 6B 02 6B 02 6B 02 6B 02 6B 02 6B 02 6B 02 6B 02 6B 02 6B 02 6B 02 6B 02 6B 02 6B 02 6B 02 6B 02 6C 02 6C 02 6C 02 6C 02 6C 02 6C 02 6C 02 6D 02 6C 02 6D 02 6D 02 6E 02 6E 02 6E 02 6E 02 6E 02 6D 02 6D 02 6D 02 6C 02 6C 02 6C 02 6C 02 6C 02 6C 02 6C 02 6C 02 6C 02 6C 02 6C 02 6C 02 6C 02 6C 02 6C 02 6C 02 6C 02 6C 02 6C 02 6C 02 6C 02 6C 02 6C 02 6C 02 6C 02 6C 02 6C 02 6C 02 6C 02 6C 02 6C 02 6C 02 6C 02 6C 02 6C 02 6C 02 6C 02 6C 02 6C 02 6C 02 6C 02 6C 02 6C 02 6C 02 6C 02 6C 02 6C 02 6C 02 6C 02 6C 02 6C 02 6C 02 6C 02 6C 02 6C 02 6C 02 6C 02 6C 02 6C 02 6C 02 6C 02 6C 02 6C 02 6C 02 6C 02 6C 02 6C 02 6C 02 6C 02 6C 02 6C 02 6C 02 6C 02 6C 02 6A 00 00 00 00 00 00 00 00 00 00 00 00 FF FF FF FF 0F 0F 02 6E 02 6E 02 6E 02 6E 02 6E 02 6E 02 6E 02 6E 02 6E 02 6E 02 6E 02 6E 02 6E 02 6E 02 6E 02 6E 02 6E 02 6E 02 6E 02 6E 02 6E 02 6E 02 6E 02 6F 02 70 02 70 02 70 02 71 02 71 02 71 02 71 02 71 02 70 02 70 02 71 02 72 02 72 02 74 02 78 02 7C 02 7C 02 7D 02 7F 02 7E 02 80 02 83 02 86 02 80 02 7A 02 76 02 73 02 72 02 71 02 70 02 70 02 70 02 70 02 6F 02 6F 02 6F 02 6F 02 6F 02 6F 02 6F 02 6F 02 6F 02 6F 02 6F 02 70 02 70 02 71 02 71 02 71 02 71 02 71 02 71 02 71 02 72 02 73 02 71 02 73 02 72 02 71 02 70 02 70 02 6F 02 6F 02 6F 02 6F 02 6F 02 6F 02 6F 02 6F 02 6F 02 6F 02 6F 02 6F 02 6F 02 6F 02 6F 02 6F 02 70 02 6F 02 6F 02 6F 02 6F 02 6F 02 6F 02 6F 02 6F 02 6F 02 6F 02 6F 02 6F 02 6F 02 6F 02 6F 02 6F 02 6F 02 6F 02 6A 00 00 00 00 00 00 00 00 00 00 00 00 FF FF FF FF 0F 0F 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 7B 02 6A 00 00 00 00 00 00 00 00 00 00 00 00 FF FF FF FF 0F 0F 02 7C 02 7D 02 7E 02 7F 02 80 02 82 02 84 02 86 02 89 02 8D 02 91 02 94 02 97 02 9A 02 9F 02 A3 02 A7 02 AB 02 AF 02 B3 02 B7 02 BA 02 BE 02 C2 02 C5 02 C8 02 CB 02 CE 02 D1 02 D3 02 D6 02 D9 02 DB 02 DD 02 E0 02 E1 02 E3 02 E5 02 E7 02 E8 02 E9 02 EB 02 EC 02 ED 02 EE 02 EF 02 F0 02 F0 02 F1 02 F1 02 F2 02 F2 02 F2 02 F2 02 F2 02 F2 02 F2 02 F2 02 F1 02 F1 02 F0 02 F0 02 EF 02 EE 02 ED 02 EC 02 EB 02 EB 02 EA 02 EA 02 E9 02 E8 02 E6 02 E5 02 E5 02 E5 02 E4 02 E4 02 E4 02 E3 02 E3 02 E3 02 E2 02 E2 02 E2 02 E2 02 E1 02 E1 02 E1 02 E1 02 E0 02 E0 02 E0 02 E0 02 E0 02 E0 02 DF 02 DF 02 DF 02 DF 02 DE 02 DE 02 DE 02 DE 02 DD 02 DD 02 DD 02 DD 02 DC 02 DC 02 DC 02 DC 02 DC 02 DB 02 DB 02 DB 02 DB 02 DB 02 DB 02 DA 02 DA 00 00 00 00 00 00 00 00 00 00 00 00 FF FF FF FF 0F 0F 02 78 02 79 02 7A 02 7B 02 7D 02 7E 02 80 02 82 02 84 02 88 02 8C 02 8F 02 93 02 96 02 99 02 9E 02 A1 02 A5 02 A9 02 AD 02 B0 02 B4 02 B7 02 BB 02 BE 02 C2 02 C5 02 C9 02 CB 02 CE 02 D0 02 D3 02 D4 02 D6 02 D8 02 DA 02 DB 02 DD 02 DE 02 DF 02 E0 02 E1 02 E2 02 E3 02 E4 02 E5 02 E5 02 E5 02 E5 02 E5 02 E5 02 E5 02 E5 02 E5 02 E5 02 E5 02 E5 02 E5 02 E4 02 E4 02 E4 02 E4 02 E3 02 E3 02 E3 02 E3 02 E2 02 E2 02 E2 02 E2 02 E1 02 E1 02 E1 02 E1 02 E0 02 E0 02 E0 02 E0 02 DF 02 DF 02 DF 02 DE 02 DE 02 DE 02 DE 02 DE 02 DD 02 DD 02 DD 02 DD 02 DC 02 DC 02 DC 02 DC 02 DC 02 DC 02 DC 02 DB 02 DB 02 DB 02 DB 02 DB 02 DA 02 DA 02 DA 02 DA 02 DA 02 DA 02 DA 02 D9 02 D9 02 D9 02 D9 02 D9 02 D9 02 D8 02 D8 02 D8 02 D8 02 D8 02 DA 00 00 00 00 00 00 00 00 00 00 00 00 FF FF FF FF 0F 0F 02 74 02 76 02 77 02 78 02 7A 02 7C 02 7F 02 82 02 86 02 89 02 8D 02 92 02 96 02 9A 02 9F 02 A5 02 AB 02 B0 02 B4 02 B9 02 BC 02 C0 02 C3 02 C6 02 C9 02 CB 02 CD 02 CF 02 D1 02 D2 02 D5 02 D6 02 D7 02 D7 02 D7 02 D8 02 D8 02 D8 02 D8 02 D8 02 D8 02 D8 02 D8 02 D7 02 D6 02 D6 02 D5 02 D5 02 D5 02 D4 02 D4 02 D4 02 D3 02 D3 02 D3 02 D3 02 D2 02 D2 02 D1 02 D1 02 D0 02 D0 02 D0 02 CF 02 CF 02 CF 02 CE 02 CE 02 CE 02 CD 02 CD 02 CC 02 CC 02 CC 02 CB 02 CB 02 CB 02 CA 02 CA 02 CA 02 CA 02 C9 02 C9 02 C8 02 C8 02 C8 02 C7 02 C7 02 C7 02 C6 02 C6 02 C6 02 C5 02 C5 02 C4 02 C4 02 C4 02 C3 02 C3 02 C3 02 C2 02 C2 02 C1 02 C1 02 C1 02 C0 02 C0 02 C0 02 BF 02 BF 02 BE 02 BE 02 BE 02 BD 02 BD 02 BC 02 BC 02 BC 02 BB 02 BB 02 DA 00 00 00 00 00 00 00 00 00 00 00 00 
'''

# 解析并输出结果
segments = parse_hex_data(hex_input)
for idx, seg in enumerate(segments):
    print(f"Segment {idx+1} ({len(seg)} values):")
    print(seg)
    plot_height_data(seg, idx)
